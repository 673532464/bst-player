<?xml version="1.0" encoding="UTF-8"?>

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Export your own players</title>
    </properties>
    <head>
        <meta name="description" content="Create custom players and export as Javascript objects" />
    </head>
    <body>
        <div style="background-color:#ffffcc;border:1px solid red;padding:5px;margin:5px">
            <p>
                The following applies to version 1.1 or later and requires GWT 2.0 or later.
            </p>
        </div>

        <section name="UiBinder Support">

            <p>
                As of version 2.0, GWT offers the
                <a href='http://code.google.com/webtoolkit/doc/latest/DevGuideUiBinder.html'>UiBinder
                framework
                </a> - a declarative means of composing application UI widgets with XML files
                in a manner similar to developing HTML pages.
            </p>
            <p>
                The following sections describe the ways of using the player widgets with UiBinder
            </p>

            <p>
/**
 * Provides classes and interface to export the API as a Javascript library in non-GWT applications
 * such as traditional page-based web applications.  This enables the players to be
 * used as widgets on websites.
 *
 * <h3><a name="export">Exporting the player widgets</a></h3>
 * Exporting widgets requires some simple steps:
 * <ul>
 * <li>inherit the <code>Script</code> module in your application</li>
 * <li>implement the <code>ExportProvider</code> interface</li>
 * <li>add a GWT type-replacement mapping for the ExportProvider implementation</li>
 * <li>use the <code>ExportUtil</code> class to export the widgets when ready</li>
 * </ul>
 *
 * These steps are further explained:
 *
 * <h4>Inherit the Script module</h4>
 * As required by the GWT compiler, the <code>com.bramosystems.oss.player.script.Script</code>
 * module should be inherited to use the class and interface in this package.
 *
 * <pre><code>
 *    &lt;!-- MyGWTApp.gwt.xml --&gt;
 *    &lt;inherits name="com.bramosystems.oss.player.script.Script" /&gt;
 * </code></pre>
 *
 * <h4>Implement the ExportProvider interface</h4>
 * The <code>ExportProvider</code> interface defines methods to retrieve the widgets to be exported as
 * Javascript objects.  Therefore, create a class that implements the interface and return
 * the player widgets of your choice. The following sample shows a basic implementation:
 *
 * <pre><code>
 *    public class MyCoolProvider implements ExportProvider {
 *       private Plugin plugin;
 *
 *       public AbstractMediaPlayer getPlayer(Plugin plugin, String mediaURL, boolean autoplay, String width,
 *                 String height, HashMap&lt;String, String&gt; options) throws LoadException,
 *                 PluginNotFoundException, PluginVersionException {
 *          this.plugin = plugin;
 *          return PlayerUtil.getPlayer(plugin, mediaURL, autoplay, height, width);
 *       }
 *
 *       public Widget getMissingPluginWidget() {
 *          return PlayerUtil.getMissingPluginNotice(plugin);
 *       }
 *
 *       public Widget getMissingPluginVersionWidget() {
 *          return PlayerUtil.getMissingPluginNotice(plugin);
 *       }
 *
 *       public MediaSeekBar getSeekBar(int height, HashMap&lt;String, String&gt; options) {
 *          return new CSSSeekBar(height);
 *       }
 *    }
 * </code></pre>
 *
 *
 * <h4>Add a GWT type-replacement mapping</h4>
 * The <code>ExportProvider</code> implementation is instantiated by the <code>ExportUtil</code> class
 * using deferred binding while exporting the players.  For the process to be a success, a type-replacement
 * mapping is required in your modules' definition.
 *
 * <p>
 * A sample is shown below:
 * </p>
 * <pre><code>
 *   &lt;!-- MyGWTApp.gwt.xml --&gt;
 *   &lt;replace-with class="com.example.MyCoolProvider"&gt;
 *      &lt;when-type-is class="com.bramosystems.oss.player.script.client.ExportProvider"/&gt;
 *   &lt;/replace-with&gt;
 * </code></pre>
 *
 * Of course, other GWT type-replacement conditions could be used as required.
 *
 * <h4>Export the widgets</h4>
 * The <code>ExportUtil</code> class defines static methods to export the player and seekbar widgets.  The
 * class could be used in module entry implementations as shown below:
 *
 * <pre><code>
 *   public class Xporter implements EntryPoint {
 *
 *     public Xporter() {
 *        ExportUtil.exportPlayer();
 *        ExportUtil.exportSeekBar();
 *     }
 *
 *     public void onModuleLoad() {
 *        ExportUtil.signalAPIReady();
 *     }
 *   }
 * </code></pre>
 *
 * The <code>ExportUtil.exportPlayer()</code> method instantiates the <code>ExportProvider</code> implementation
 * and exports the player widget returned by the <code>getPlayer()</code> method.  If the required plugin is
 * not found the <code>getMissingPluginWidget()</code> method is called while the
 * <code>getMissingPluginVersionWidget()</code> is called when the required plugin version is not found.
 *
 * <p>
 * The player widget is exported as a <code>bstplayer.Player(plugin,mediaURL,autoplay,width,height,options)</code>
 * object where:
 * <ul>
 * <li><code>plugin</code>   [String]  - is one of the defined Plugins (Note: case-sensitive)</li>
 * <li><code>mediaURL</code> [String]  - the URL of the media</li>
 * <li><code>autoplay</code> [boolean] - true to autoplay the media, false otherwise</li>
 * <li><code>width</code>    [String]  - the width of the widget (in CSS units)</li>
 * <li><code>height</code>   [String]  - the height of the widget (in CSS units)</li>
 * <li><code>options</code>  [Javascript Object] - used to pass user-defined map of values to the
 * <code>ExportProvider</code> implementation</li>
 * </ul>
 *
 * See <a href="#usage">sample usage</a> below.
 * </p>
 *
 * <p>
 * Similary, the <code>ExportUtil.exportSeekBar()</code> method instantiates the <code>ExportProvider</code>
 * implementation and exports the seekbar widget returned by the <code>getSeekBar()</code> method.
 * </p>
 *
 * The seekbar widget is exported as a <code>bstplayer.SeekBar(height,containerId,options)</code> object
 * where:
 * <ul>
 * <li><code>height</code> [String] - the height of the widget (in CSS units)</li>
 * <li><code>containerId</code> [String] - the HTML element <code>id</code>, where the widget will be placed</li>
 * <li><code>options</code> [Javascript Object] - used to pass user-defined map of values to the
 * <code>ExportProvider</code> implementation</li>
 * </ul>
 *
 * See <a href="#usage">sample usage</a> below.
 *
 * <p>
 * The <code>ExportUtil.signalAPIReady()</code> method notifies the host page that the Javascript objects are
 * now available and can be created and used as required.  This method calls the
 * <code>onBSTPlayerReady()</code> Javascript function, which SHOULD be defined on the host page.
 * The <code>Player</code> and/or <code>SeekBar</code> objects SHOULD be created within this function.
 * </p>
 *
 * <h3><a name="usage">Using the exported widgets</a></h3>
 * The exported API should be available as a GWT compilation in its module folder/directory. Using the widgets
 * is thereafter simple:
 *
 * <h4>Add the module script to the host page</h4>
 * GWT applications end up as an <code>module-name.nocache.js</code> javascript file, hence add this to
 * the HTML host page.
 *
 * <pre><code>
 *      &lt;script type="text/javascript" src="module-name/module-name.nocache.js"&gt;&lt;/script&gt;
 * </code></pre>
 *
 * <h4>Create the widgets HTML container elements</h4>
 * Create the HTML elements that will contain the widgets.  This can be as simple as defining HTML
 * &lt;div&gt; tags at required places.
 *
 * <pre><code>
 *      &lt;div id="my-player" /&gt;
 *      &lt;div id="_progress" /&gt;
 * </code></pre>
 *
 * <h4>Define the <code>onBSTPlayerReady()</code> function</h4>
 * This function will be called when the <code>Player</code> and/or <code>SeekBar</code> objects are bound
 * to the host page
 *
 * <pre><code>
 *      &lt;script type="text/javascript"&gt;
 *          var onBSTPlayerReady = function() {
 *          }
 *      &lt;/script&gt;
 * </code></pre>
 *
 *
 * <h4>Create the widgets and use as required</h4>
 * Create the <code>Player</code> object within the defined <code>onBSTPlayerReady()</code> function.  Once
 * the object is created, the widget can be attached to the page by calling the <code>inject()</code> method.
 * The <code>inject()</code> method takes the <code>id</code> of the HTML element as a parameter.  Following
 * is an example:
 *
 * <pre><code>
 *      &lt;script type="text/javascript"&gt;
 *          var onBSTPlayerReady = function() {
 *              player = new bstplayer.Player("Auto", "some-cool-sound.mp3", false, "100%", "50px", null);
 *              player.inject('my-player');
 *
 *              seekbar = new bstplayer.SeekBar(10, '_progress', null);
 *          }
 *      &lt;/script&gt;
 * </code></pre>
 *
 * The <code>Player</code> object supports all the public methods defined in the
 * <a href="../../core/client/AbstractMediaPlayer.html">AbstractMediaPlayer</a> class, except all the
 * <code>addXXXHandler</code> methods.
 *
 * <p>
 * Instead of the <code>addXXXHandler</code> methods, the <code>Player</code> object defines an
 * <code>addEventListener(name, function)</code> method with the following event names:
 * <ul>
 * <li><code>onPlayerState</code>  - for PlayerStateEvent events</li>
 * <li><code>onPlayState</code> - for PlayStateEvent events</li>
 * <li><code>onLoadingProgress</code> - for LoadingProgressEvent events</li>
 * <li><code>onMediaInfo</code> - for MediaInfoEvent events</li>
 * <li><code>onError</code> - for DebugEvent events of the Error type</li>
 * <li><code>onDebug</code> - for DebugEvent events of the Info type</li>
 * </ul>
 * </p>
 *
 * The <code>SeekBar</code> object supports the following methods:
 * <ul>
 * <li><code>setLoadingProgress(loadingProgress)</code> - set the progress of the media loading operation</li>
 * <li><code>setPlayingProgress(playingProgress)</code> - set the progress of the media playback operation</li>
 * </ul>
 *
 * Also, an <code>addEventListener(name, function)</code> method is defined with the following event name:
 * <ul>
 * <li><code>onSeekChanged</code> - for SeekChangeEvent events</li>
 * </ul>
 *
 * The example below illustrates a custom player implementation:
 * <pre><code>
 *         &lt;script type="text/javascript"&gt;
 *             var player;
 *             var seekbar;
 *             var onBSTPlayerReady = function() {
 *                 seekbar = new bstplayer.SeekBar(10, '_progress', null);
 *                 seekbar.addEventListener("onSeekChanged", function(evt){
 *                     player.setPlayPosition(evt.seekPosition * player.getMediaDuration());
 *                 });
 *
 *                 player = new bstplayer.Player("Auto", "nice.mp3", false, null, null, null);
 *                 player.addEventListener("onPlayState", function(evt){
 *                     switch(evt.playState) {
 *                         case 'Paused':
 *                             document.getElementById("playButton").disabled = false;
 *                             document.getElementById("pauseButton").disabled = true;
 *                             document.getElementById("stopButton").disabled = false;
 *                             break;
 *                         case 'Started':
 *                             document.getElementById("playButton").disabled = true;
 *                             document.getElementById("pauseButton").disabled = false;
 *                             document.getElementById("stopButton").disabled = false;
 *                             break;
 *                         case 'Stopped':
 *                         case 'Finished':
 *                             document.getElementById("playButton").disabled = false;
 *                             document.getElementById("pauseButton").disabled = true;
 *                             document.getElementById("stopButton").disabled = true;
 *                             break;
 *                     }
 *                 });
 *                 player.addEventListener("onPlayerState", function(evt){
 *                     if(evt.playerState == 'Ready') {
 *                         document.getElementById("playButton").disabled = false;
 *                         document.getElementById("pauseButton").disabled = true;
 *                         document.getElementById("stopButton").disabled = true;
 *
 *                         playTimer = window.setInterval(function(){
 *                             seekbar.setPlayingProgress(player.getPlayPosition() / player.getMediaDuration());
 *                         }, 1000);
 *                     }
 *                 });
 *                 player.addEventListener("onLoadingProgress", function(evt){
 *                     seekbar.setLoadingProgress(evt.progress);
 *                 });
 *                 player.inject('_pid');
 *             }
 *         &lt;/script&gt;
 *
 *         &lt;div style="width:350px"&gt;
 *             &lt;div id="_pid"&gt;&lt;/div&gt;
 *             &lt;div&gt;
 *                 &lt;button id="playButton" onclick="player.playMedia()" disabled &gt;Play&lt;/button&gt;
 *                 &lt;button id="pauseButton" onclick="player.pauseMedia()" disabled &gt;Pause&lt;/button&gt;
 *                 &lt;button id="stopButton" onclick="player.stopMedia()" disabled &gt;Stop&lt;/button&gt;
 *             &lt;/div&gt;
 *             &lt;div id="_progress"&gt;&lt;/div&gt;
 *         &lt;/div&gt;
 * </code></pre>
 *
 */

            </p>

            <subsection name="The required module">
                <p>
                For this description to work, your application should inherit the
                    <i>com.bramosystems.oss.player.uibinder.UiBinder</i> module.  This is as simple as
                putting the following line in your module XML file:
                </p>
                <source>
&lt;inherits name="com.bramosystems.oss.player.uibinder.UiBinder"/&gt;</source>
            </subsection>

            <subsection name="The widgets namespace">
                <p>
                    The player widgets with UiBinder support are placed in the
                    <code>com.bramosystems.oss.player.uibinder.client</code> package.  Consequently,
                    in order to use the player widgets in a ui.xml template file, you need to tie
                    the package to an XML namespace prefix.
                </p>

                <source>
&lt;ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
    xmlns:player='urn:import:com.bramosystems.oss.player.uibinder.client'&gt;
    ...
&lt;/ui:uibinder&gt;</source>
            </subsection>

            <subsection name="The supported players">
                <p>
                    The following widgets are the supported:
                </p>
                <table>
                    <tr>
                        <th>Instance name</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>WinMediaPlayer</td>
                        <td>Embeds Windows Media Player plugin</td>
                    </tr>
                    <tr>
                        <td>QuickTimePlayer</td>
                        <td>Embeds QuickTime plugin</td>
                    </tr>
                    <tr>
                        <td>Flash</td>
                        <td>Embeds a generic Adobe Flash application</td>
                    </tr>
                    <tr>
                        <td>FlashMediaPlayer</td>
                        <td>Embeds Adobe Flash plugin for playing Flash supported file formats</td>
                    </tr>
                    <tr>
                        <td>VLCPlayer</td>
                        <td>Embeds VLC Media Player plugin</td>
                    </tr>
                    <tr>
                        <td>Native</td>
                        <td>Embeds media with HTML 5 video handler in supported browsers</td>
                    </tr>
                    <tr>
                        <td>YouTube</td>
                        <td>Embeds YouTube video</td>
                    </tr>
                    <tr>
                        <td>Chromeless</td>
                        <td>Embeds YouTube video using the Chromeless player</td>
                    </tr>
                    <tr>
                        <td>Auto</td>
                        <td>Embeds media using any of the avaliable media plugins on the client</td>
                    </tr>
                    <tr>
                        <td>PlaylistSupport</td>
                        <td>Embeds media using any available media plugin that supports client side playlist
                        management
                        </td>
                    </tr>
                    <tr>
                        <td>MatrixSupport</td>
                        <td>Embeds media using any available media plugin that supports matrix transformation</td>
                    </tr>
                </table>
                <p>
                    Note: The YouTube and Chromeless widgets are placed in the
                    <code>com.bramosystems.oss.player.uibinder.client.youtube</code> package, and thus
                    requires a different XML namespace.
                </p>

                <source>
&lt;ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
    xmlns:utube='urn:import:com.bramosystems.oss.player.uibinder.client.youtube'&gt;
    ...
&lt;/ui:uibinder&gt;</source>
            </subsection>

            <subsection name="The supported attributes">
                <p>
                    Each of the widgets support the following attributes (except stated otherwise)
                </p>
                <table>
                    <tr>
                        <th>Attribute</th>
                        <th>Required</th>
                        <th>Type</th>
                        <th>Default</th>
                        <th>Comment</th>
                    </tr>
                    <tr>
                        <td>mediaURL</td>
                        <td>true</td>
                        <td>String</td>
                        <td>-</td>
                        <td>The URL of the media.
                            <br/>Note: The <code>YouTube</code> widget uses <code>videoURL</code> instead
                        </td>
                    </tr>
                    <tr>
                        <td>height</td>
                        <td>true</td>
                        <td>String</td>
                        <td>-</td>
                        <td>The height of the widget (CSS units)</td>
                    </tr>
                    <tr>
                        <td>width</td>
                        <td>true</td>
                        <td>String</td>
                        <td>-</td>
                        <td>The width of the widget (CSS units)</td>
                    </tr>
                    <tr>
                        <td>autoplay</td>
                        <td>true</td>
                        <td>boolean</td>
                        <td>-</td>
                        <td>If the media should be played automatically.
                            <br/>Note:
                            <code>Flash</code> widget does not support this attribute
                        </td>
                    </tr>
                    <tr>
                        <td>showLogger</td>
                        <td>false</td>
                        <td>boolean</td>
                        <td>false</td>
                        <td>If the Logger widget should show
                            <br/>Note:
                            <code>Flash</code> widget does not support this attribute
                        </td>
                    </tr>
                    <tr>
                        <td>resizeToVideoSize</td>
                        <td>false</td>
                        <td>boolean</td>
                        <td>false</td>
                        <td>If the player should resize to match the size of the video
                        (if embedded media is a video file).
                            <br/>Note:
                            <code>Flash</code> widget does not support this attribute
                        </td>
                    </tr>
                    <tr>
                        <td>controllerVisible</td>
                        <td>false</td>
                        <td>boolean</td>
                        <td>true</td>
                        <td>If the player controls should be visible
                            <br/>Note:
                            <code>Flash, YouTube and Chromeless</code> widgets does not support this attribute
                        </td>
                    </tr>
                    <tr>
                        <td>loopCount</td>
                        <td>false</td>
                        <td>int</td>
                        <td>1</td>
                        <td>Number of times to repeat playback before stopping
                            <br/>Note:
                            <code>Flash, YouTube and Chromeless</code> widgets does not support this attribute
                        </td>
                    </tr>
                    <tr>
                        <td>params</td>
                        <td>false</td>
                        <td>String</td>
                        <td>-</td>
                        <td>Supported ONLY by <code>Flash</code> widget.  A comma separated list of
                        name/value pairs of Adobe Flash parameters. E.g.
                        <code>params='allowScriptAccess=sameDomain,bgcolor=#000000'</code>
                        <br/>Note: Do not pass <code>flashVars</code> parameter with this attribute,
                        use the <code>flashVars</code> attribute instead.
                        </td>
                    </tr>
                    <tr>
                        <td>flashVars</td>
                        <td>false</td>
                        <td>String</td>
                        <td>-</td>
                        <td>Supported ONLY by <code>Flash</code> widget.  A list of name/value pairs
                        parameters that is passed to the Flash application. E.g.
                        <code>flashVars='param1=value1&amp;param2=value2'</code>
                        </td>
                    </tr>
                </table>
            </subsection>

            <subsection name="Relative URLs">
                <p>
                    The player widgets define special URL prefixes to make media files relative to the
                    application host page accessible. The prefixes are resolved to the fully qualified
                    names during compilation.
                </p>
                <table>
                    <tr>
                        <th>Prefix</th>
                        <th>Fully Qualified Name</th>
                    </tr>
                    <tr>
                        <td>gwt-host::</td>
                        <td>The URL of the application's host page as returned by
                        <code>GWT.getHostPageBaseURL()</code></td>
                    </tr>
                    <tr>
                        <td>gwt-module::</td>
                        <td>The URL of the application's module as returned by
                        <code>GWT.getModuleBaseURL()</code></td>
                    </tr>
                </table>
            </subsection>

            <subsection name="Example Usage">
                <p>
                    Embed media with Windows Media Player plugin
                </p>
                <source>
&lt;ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
    xmlns:g='urn:import:com.google.gwt.user.client.ui'
    xmlns:player='urn:import:com.bramosystems.oss.player.uibinder.client'&gt;
        ...
        &lt;player:WinMediaPlayer autoplay='true' height='50px' width='100%'
            mediaURL='gwt-host::media/applause.mp3' /&gt;
        ...
&lt;/ui:UiBinder&gt;</source>

                <p>
                    Embed MP3 media with the HTML 5 video elements with the logger showing
                </p>
                <source>
&lt;ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
    xmlns:g='urn:import:com.google.gwt.user.client.ui'
    xmlns:player='urn:import:com.bramosystems.oss.player.uibinder.client'&gt;
        ...
        &lt;player:Native autoplay='true' height='20px' width='100%'
            showLogger='true' mediaURL='gwt-host::media/o-na-som.mp3' /&gt;
        ...
&lt;/ui:UiBinder&gt;</source>

                <p>
                    Embed YouTube video with the YouTube widget
                </p>
                <source>
&lt;ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
    xmlns:g='urn:import:com.google.gwt.user.client.ui'
    xmlns:player='urn:import:com.bramosystems.oss.player.uibinder.client.youtube'&gt;
        ...
        &lt;player:YouTube height='350px' width='100%' showLogger='true'
                    videoURL='http://www.youtube.com/v/QbwZL-EK6CY' /&gt;
        ...
&lt;/ui:UiBinder&gt;</source>
            </subsection>

            <subsection name="Programmatic Access">
                <p>
                    UiBinder offers owner classes programmatic access to widgets defined in UI templates.
                    The player can be injected into the owner class with the <code>ui:field</code> attribute.
                </p>
                <p>
                    With UiBinder, the player widgets only support the methods defined in the
                    <a href="bst-player-api/apidocs/com/bramosystems/oss/player/core/client/AbstractMediaPlayer.html">
                        AbstractMediaPlayer</a> class and the
                        <a href="bst-player/bst-player-api/apidocs/com/bramosystems/oss/player/core/client/PlaylistSupport.html">
                            PlaylistSupport</a>/
                            <a href="bst-player/bst-player-api/apidocs/com/bramosystems/oss/player/core/client/geom/MatrixSupport.html">
                                MatrixSupport</a> interfaces.

                    However, you can access player specific methods by calling <code>player.getEngine()</code>.
                    The following example demonstrates this:
                </p>
                <source>
&lt;!-- WMPExample.ui.xml --&gt;
&lt;ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
    xmlns:g='urn:import:com.google.gwt.user.client.ui'
    xmlns:player='urn:import:com.bramosystems.oss.player.uibinder.client'&gt;

    &lt;g:VerticalPanel spacing='10'&gt;
        ...
        &lt;player:WinMediaPlayer autoplay='true' height='50px' width='100%'
            mediaURL='gwt-host::media/applause.mp3' ui:field='player' /&gt;
        ...
    &lt;/g:VerticalPanel&gt;
&lt;/ui:UiBinder&gt;


&lt;!-- WMPExample.java --&gt;
public class WMPExample extends Composite {
  interface WMPBinder extends UiBinder&lt;VerticalPanel, WMPExample&gt; {}

  private static WMPBinder _binder = GWT.create(WMPBinder.class);

  @UiField WinMediaPlayer player;   // UiBinder injects the created instance...

  public WMPExample() {
    initWidget(_binder.createAndBindUi(this));

    // access general methods directly
    player.addPlayerStateHandler( ... );

    // access WinMediaPlayer specific methods...
    player.getEngine().setUIMode(UIMode.MINI);
  }
}</source>
            </subsection>

        </section>
    </body>
</document>