<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Copyright 2009 Sikirulai Braheem
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
                layout="horizontal" applicationComplete="initApp()">
    <mx:Script>
        <![CDATA[
            import com.bramosystems.oss.player.*;
            import com.bramosystems.oss.player.playlist.*;

            import flash.external.*;
            import flash.media.*;
            import flash.events.*;
            import flash.net.*;

            private var playerId:String;
            private var debug:Boolean = true;
            private var mp3engine:MP3Engine;

            private function initApp():void {
                // Check if the container is able to use the external API.
                if (ExternalInterface.available) {
                    try {
                        // setup callback interfaces...
                        ExternalInterface.addCallback("loadSnd", load);
                        ExternalInterface.addCallback("playSnd", play);
                        ExternalInterface.addCallback("stopSnd", stop);
                        ExternalInterface.addCallback("pauseSnd", pause);
                        ExternalInterface.addCallback("getSndPlayPosition", getPlayPosition);
                        ExternalInterface.addCallback("setSndPlayPosition", setPlayPosition);
                        ExternalInterface.addCallback("getSndVolume", getVolume);
                        ExternalInterface.addCallback("setSndVolume", setVolume);
                        ExternalInterface.addCallback("getSndDuration", getDuration);
                        ExternalInterface.addCallback("closeSnd", close);
                        ExternalInterface.addCallback("getSndPlayerVer", getFlashVersion);
                        ExternalInterface.addCallback("getSndPlayCount", getPlayCount);
                        ExternalInterface.addCallback("setSndPlayCount", setPlayCount);
                        ExternalInterface.addCallback("addMediaToPlaylist", addToPlaylist);
                        ExternalInterface.addCallback("removeMediaFromPlaylist", removeFromPlaylist);
                        ExternalInterface.addCallback("setMediaShuffleOn", enableShuffle);
                        ExternalInterface.addCallback("isMediaShuffleOn", isShuffleEnabled);

                        // get params...
                        playerId = Application.application.parameters.playerId;
                        mp3engine = new MP3Engine(playerId);

                        ExternalInterface.call("bstSwfSndInit", playerId);
                    } catch(err:SecurityError) {
                        logError(err.message);
                    } catch(err:Error) {
                        logError(err.message);
                    }
                } else {
                    log("External interface is not available for this container.");
                }
            }

            public function getFlashVersion():String {
                var vers:String = flash.system.Capabilities.version;
                vers = vers.substring(4);
                var v:Array = vers.split(",");
                vers = v[0];
                for(var i:int = 1; i < v.length; i++) {
                    vers += "." + v[i];
                }
                return vers;
            }

            /**************************** PLAYER IMPL ******************************/
            private var mediaUrl:String;

            public function load(url:String):void {
                if(url.search(".m3u") >= 0) {
                    log("Loading playlist at " + url);
                    loadM3U(url, false);
                } else {    // load single file...
                    var playlist:Playlist = new Playlist();
                    playlist.add(new PlaylistEntry(0, url, url));
                    mp3engine.setPlaylist(playlist);
                }
            }

            public function addToPlaylist(mediaUrl:String):void {
                if(mediaUrl.search(".m3u") >= 0) {
                    log("Adding playlist at " + mediaUrl);
                    loadM3U(mediaUrl, true);
                } else {    // add single file...
                    mp3engine.getPlaylist().add(new PlaylistEntry(0, mediaUrl, mediaUrl));
                    mp3engine.getPlaylist().checkShuffle();
                }
            }

            public function removeFromPlaylist(index:int):void {
                mp3engine.getPlaylist().remove(index);
            }

            public function setPlayPosition(channelPosition:Number):void {
                mp3engine.setPlayPosition(channelPosition);
            }

            public function play():void {
                mp3engine.play();
            }

            public function stop():void {
                mp3engine.stop();
            }

            public function pause():void {
                mp3engine.pause();
            }

            public function getPlayPosition():Number {
                return mp3engine.getPlayPosition();
            }

            public function getDuration():Number {
                return mp3engine.getDuration();
            }

            public function getVolume():Number {
                return mp3engine.getVolume();
            }

            public function setVolume(vol:Number):void {
                mp3engine.setVolume(vol);
            }

            public function close():void {
                mp3engine.close();
            }

            public function setPlayCount(count:int):void {
                if(count < 0) {
                    mp3engine.getPlaylist().setRepeatMode(RepeatMode.REPEAT_ALL);
                } else {
                    mp3engine.getPlaylist().setRepeatMode(RepeatMode.NO_REPEAT);
                    mp3engine.getPlaylist().setPlayCount(count);
                }
            }

            public function getPlayCount():int {
                var count:int = 0;
                switch(mp3engine.getPlaylist().getRepeatMode()) {
                    case RepeatMode.REPEAT_ALL:
                    case RepeatMode.REPEAT_ONE:
                        count = -1;
                        break;
                     case RepeatMode.NO_REPEAT:
                        count = mp3engine.getPlaylist().getPlayCount();
                }
                return count;
            }

            public function enableShuffle(enable:Boolean):void {
                mp3engine.getPlaylist().enableShuffle(enable);
            }

            public function isShuffleEnabled():Boolean {
                return mp3engine.getPlaylist().isShuffleEnabled();
            }

            public function setDebugEnabled(enabled:Boolean):void {
                debug = enabled;
            }

            /********************* Javascript call impls. *************************/
            private function loadingErrorHandler(event:IOErrorEvent):void {
                var txt:String = event.text.toLowerCase();
                if(txt.search("2032") >= 0) {
                    logError(event.text);
//                    logError("Error loading media at " + mediaUrl +
//                        ".  The stream could not be opened, please check your network connection.");
                } else {
                    logError(event.text);
                }
            }

            // Event handlers...
            private function log(report:String):void {
                ExternalInterface.call("bstSwfSndDebug", playerId, report);
            }

            private function logError(error:String):void {
                ExternalInterface.call("bstSwfSndError", playerId, error);
            }

            private function getBaseURL(url:String):String {
                return url.substring(0, url.lastIndexOf("/"));
            }

            /************************* M3U PLAYLIST SUPPORT ****************************/
            private var loader:URLLoader;
            private var m3uParser:M3UParser;

            private function loadM3U(m3uUrl:String, append:Boolean):void {
                m3uParser = new M3UParser(getBaseURL(m3uUrl));

                loader = new URLLoader();
                loader.addEventListener(IOErrorEvent.IO_ERROR, loadingErrorHandler);
                if(append) {
                    loader.addEventListener(Event.COMPLETE, listAppendHandler);
                } else {
                    loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);
                }

                try {
                    loader.load(new URLRequest(m3uUrl));
                } catch (error:Error) {
                }
            }

            private function listAppendHandler(event:Event):void {
                var mp3s:Array = m3uParser.parse(loader.data);

                for(var i:uint = 0; i < mp3s.length; i++) {
                    mp3engine.getPlaylist().add(mp3s[i]);
                }
                mp3engine.getPlaylist().checkShuffle();
            }

            private function loaderCompleteHandler(event:Event):void {
                var playlist:Playlist = new Playlist();
                var mp3s:Array = m3uParser.parse(loader.data);

                for(var i:uint = 0; i < mp3s.length; i++) {
                    playlist.add(mp3s[i]);
                }
                mp3engine.setPlaylist(playlist);
            }
        ]]>
    </mx:Script>
</mx:Application>