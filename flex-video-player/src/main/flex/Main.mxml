<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Copyright 2009 Sikirulai Braheem
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" styleName="plain" backgroundColor="0x000000"
        xmlns="*" applicationComplete="initApp()">
    <mx:Script>
        <![CDATA[
            import flash.external.*;
            import flash.media.*;
            import flash.events.*;
            import flash.net.*;
            import flash.utils.Timer;
            import mx.core.*;

            private var playerId:String;
            private var debug:Boolean = true;
            private var videoComponent:UIComponent;
            private var loadingTimer:Timer;

            private function initApp():void {
                // Check if the container is able to use the external API.
                if (ExternalInterface.available) {
                    try {
                        // setup callback interfaces...
                        ExternalInterface.addCallback("loadVid", loadVideo);
                        ExternalInterface.addCallback("playVid", playVideo);
                        ExternalInterface.addCallback("stopVid", stopVideo);
                        ExternalInterface.addCallback("getVidPlayPosition", getPlayPosition);
                        ExternalInterface.addCallback("setVidPlayPosition", setPlayPosition);
                        ExternalInterface.addCallback("getVidVolume", getVolume);
                        ExternalInterface.addCallback("setVidVolume", setVolume);
                        ExternalInterface.addCallback("getVidDuration", getDuration);
                        ExternalInterface.addCallback("closeVid", close);
                        ExternalInterface.addCallback("getVidPlayerVer", getFlashVersion);

                        // get params...
                        playerId = Application.application.parameters.playerId;

                        videoComponent = new UIComponent();
                        videoBase.addChild(videoComponent);

                        vid = new Video();
                        videoComponent.addChild(vid);
                        vid.height = vid.stage.stageHeight - 10;
                        vid.width = vid.stage.stageWidth - 10;

                        nconnect = new NetConnection();
                        nconnect.connect(null);
                        nconnect.addEventListener(NetStatusEvent.NET_STATUS, statusHandler);

                        loadingTimer = new Timer(1000, 1);
                        loadingTimer.addEventListener("timer", loadingProgressHandler);

                        initCompleteNotify();
                    } catch(err:SecurityError) {
                        logError(err.message);
                        log("ERROR : " + err.message);
                    } catch(err:Error) {
                        logError(err.message);
                        log("ERROR : " + err.message);
                    }
                } else {
                    log("External interface is not available for this container.");
                }
            }

            /**************************** PLAYER IMPL ******************************/
            private var nconnect:NetConnection;
            private var ns:NetStream;
            private var vid:Video;
            private var metadata:Object;
            private var mediaURL:String;
            private var isLoaded:Boolean = false, position:Number;
            private var isPlaying:Boolean = false, isPaused:Boolean = false;;

            private function initCompleteNotify():void {
                ExternalInterface.call("bstSwfVidInit", playerId);
            }

            public function loadVideo(mediaURL:String):void {
                 log("Loading media at " + mediaURL);
                 this.mediaURL = mediaURL;

                 ns = new NetStream(nconnect);
                 ns.client = this;
                 ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
                 ns.addEventListener(NetStatusEvent.NET_STATUS, statusHandler);
                 ns.soundTransform = new SoundTransform(0.5);

                 vid.clear();
                 vid.attachNetStream(ns);

                 position = 0
                 playerReadyHandler();
            }

            public function playVideo():void {
                if(isLoaded) {
                    ns.resume();
                    playStatedHandler();
                } else {
                    ns.play(mediaURL);
                    isLoaded = true;
                    log("Media loading started...");
                    loadingTimer.start();
                }
            }

            public function stopVideo(rewind:Boolean):void {
                ns.pause();
                if(rewind) {
                    position = 0;
                    ns.seek(0);
                    log("Media playback stopped...");
                    isPaused = false;
                } else {
                    isPaused = true;
                    log("Playback paused...");
                }
                isPlaying = false;
            }

            public function setVolume(vol:Number):void {
                if(ns == null)
                    logError("Stream not available");

                var pan:Number = ns.soundTransform.pan;
                ns.soundTransform = new SoundTransform(vol, pan);
                log("Volume set to " + (vol * 100).toFixed(0) + "%");
            }

            public function getVolume():Number {
                if(ns == null)
                    return 0;

                return ns.soundTransform.volume;
            }

            public function getDuration():Number {
                if(metadata == null)
                    return 0;

                return metadata.duration;
            }

            public function getPlayPosition():Number {
                if(ns == null)
                    return 0;

                if(isPlaying) {
                    position = ns.time;
                }

                return position;
            }

            public function setPlayPosition(pos:Number):void {
                if(ns == null)
                    return;

                if(isPaused || isPlaying) {
                    ns.seek(pos);
                    position = pos;
                }
            }

            public function close():void {
                if(ns != null) {
                    ns.close();
                    ns = null;
                }

                if(nconnect != null) {
                    nconnect.close();
                    nconnect = null;
                }
            }

            public function setDebugEnabled(enabled:Boolean):void {
                debug = enabled;
            }

            public function getFlashVersion():String {
                var vers:String = flash.system.Capabilities.version;
                vers = vers.substring(4);
                var v:Array = vers.split(",");
                vers = v[0];
                for(var i:int = 1; i < v.length; i++) {
                    vers += "." + v[i];
                }
                return vers;
            }

            /********************* Javascript call impls. *************************/
            public function onMetaData(meta:Object):void {
                metadata = meta;
                var hdwr:String = "Audio: ";
                switch(meta.audiocodecid) {
                    case 0:
                        hdwr += "Uncompressed";
                        break;
                    case 1:
                        hdwr += "ADPCM";
                        break;
                    case 2:
                        hdwr += "MP3";
                        break;
                    case 5:
                        hdwr += "Nellymoser 8kHz Mono";
                        break;
                    case 6:
                        hdwr += "Nellymoser";
                        break;
                    default:
                        hdwr += "Unknown";
                }

                hdwr += ", Video: ";
                switch(meta.videocodecid) {
                    case 2:
                        hdwr += "Sorenson H.263";
                        break;
                    case 3:
                        hdwr += "Screen video";
                        break;
                    case 4:
                        hdwr += "VP6 video";
                        break;
                    case 5:
                        hdwr += "VP6 video with alpha channel";
                        break;
                    default:
                        hdwr += "Unknown";
                }
                hdwr += ", Frame rate: " + meta.framerate;

                log("Media Metadata available");
                ExternalInterface.call("bstSwfVidMetadata", playerId, meta.duration, hdwr);
            }

            private function asyncErrorHandler(event:AsyncErrorEvent):void {
               log("Async ERROR: " + event.text);
            }

            private function statusHandler(event:NetStatusEvent):void {
                switch(event.info.code) {
                    case "NetStream.Play.Start":
                        playStatedHandler();
                        break;
                    case "NetStream.Play.Stop":
                        playFinishedHandler();
                        log("Media playback finished");
                        break;

                    case "NetStream.Buffer.Empty":
                        log("Buffer empty...");
                        break;

                    // errors...
                    case "NetStream.Play.Failed":   // play failed
                        logError("An error has occurred!");
                        break;
                    case "NetStream.Play.StreamNotFound":
                        logError("Media file not found. If the file is located on the " +
                        "Internet, connect to the Internet. If the file is located on a " +
                        "removable storage media, insert the storage media.");
                        isLoaded = false;
                        break;
                    case "NetStream.Play.FileStructureInvalid":
                        break;
                    case "NetStream.Play.NoSupportedTrackFound":
                        break;
                    case "NetConnection.Connect.Rejected":
                        logError("Connection rejected!");
                        break;
                    case "NetConnection.Connect.Failed":
                        logError("Connection cannot be established!");
                        break;
                }
            }

            private function playerReadyHandler():void {
                ExternalInterface.call("bstSwfVidMediaStateChanged", playerId, 1);
            }

            private function playStatedHandler():void {
                log("Media playback started");
                isPlaying = true;
                isPaused = false;
                ExternalInterface.call("bstSwfVidMediaStateChanged", playerId, 2);
            }

            private function playFinishedHandler():void {
                ns.pause();
                ns.seek(0);
                isPlaying = false;
                isPaused = false;
                ExternalInterface.call("bstSwfVidMediaStateChanged", playerId, 9);
            }

            private function loadingProgressHandler(event:TimerEvent):void {
               var prog:Number = ns.bytesLoaded / ns.bytesTotal;
               ExternalInterface.call("bstSwfVidLoadingProgress", playerId, prog);
               if((prog < 1) && isLoaded) {
                    loadingTimer.reset();
                    loadingTimer.start();
               } else {
                   ExternalInterface.call("bstSwfVidMediaStateChanged", playerId, 10);
                   log("Loading complete");
               }
            }

            private function log(report:String):void {
                ExternalInterface.call("bstSwfVidDebug", playerId, report);
            }

            private function logError(error:String):void {
                ExternalInterface.call("bstSwfVidError", playerId, error);
            }

//            private function loadingErrorHandler(event:IOErrorEvent):void {
//               ExternalInterface.call("bstSwfSndError", playerId, event.text);
//               log("ERROR: " + event.text);
//            }
        ]]>
    </mx:Script>
    <mx:VBox id="videoBase" paddingTop="5" paddingLeft="5">
    </mx:VBox>
</mx:Application>