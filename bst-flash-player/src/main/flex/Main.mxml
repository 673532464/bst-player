<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Copyright 2009 Sikirulai Braheem
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" applicationComplete="initApp()" 
        horizontalAlign="center" verticalAlign="middle" backgroundAlpha="0.0"
        horizontalScrollPolicy="off" verticalScrollPolicy="off"
        paddingLeft="0" paddingTop="0" paddingBottom="0" paddingRight="0">

    <mx:Script>
        <![CDATA[
            import com.bramosystems.oss.player.*;
            import com.bramosystems.oss.player.playlist.*;
            import com.bramosystems.oss.player.external.*;
            import com.bramosystems.oss.player.events.*;

            import flash.external.*;
            import flash.display.*;
    
            private var debug:Boolean = true;
            private var player:Engine, mp3:MP3Engine, vdu:VideoEngine;
            private var playlist:Playlist;
            private var listManager:PlaylistManager;
            private var setting:Setting;

            private function initApp():void {
                // Check if the container is able to use the external API.
                if (ExternalInterface.available) {
                    try {
                        // get params...
                        var playerId:String = Application.application.parameters.playerId;
                        Log.playerId = playerId;
                        EventUtil.playerId = playerId;

                        setting = new Setting();
                        setting.addEventListener(SettingChangedEvent.VOLUME_CHANGED, updateVolume);
                        playlist = new Playlist();
                        listManager = new PlaylistManager(playlist, setting);
                        mp3 = new MP3Engine(playStartedHandler, playFinishedHandler);
                        vdu = new VideoEngine(playStartedHandler, playFinishedHandler);

                        mp3.setVolume(setting.getVolume());
                        vdu.setVolume(setting.getVolume());

    //                    stage.scaleMode = StageScaleMode.NO_BORDER;
                        setupCallbacks();
                        EventUtil.fireApplicationInitialized();
                    } catch(err:SecurityError) {
                        Log.error(err.message);
                    } catch(err:Error) {
                        Log.error(err.message);
                    }
                } else {
                    Log.info("External interface is not available for this container.");
                }
            }

            public function getFlashVersion():String {
                var vers:String = flash.system.Capabilities.version;
                vers = vers.substring(4);
                var v:Array = vers.split(",");
                vers = v[0];
                for(var i:int = 1; i < v.length; i++) {
                    vers += "." + v[i];
                }
                return vers;
            }

            /********************** SETUP JS-INTERFACE FUNCTIONS ************************/
            public function setupCallbacks():void {
                // setup callback interfaces...
                ExternalInterface.addCallback("closeMda", close);
                ExternalInterface.addCallback("getMdaPlayerVer", getFlashVersion);

                // settings stuffs ...
                ExternalInterface.addCallback("getMdaVolume", setting.getVolume);
                ExternalInterface.addCallback("setMdaVolume", setting.setVolume);
                ExternalInterface.addCallback("getMdaLoopCount", setting.getLoopCount);
                ExternalInterface.addCallback("setMdaLoopCount", setting.setLoopCount);
                ExternalInterface.addCallback("isMdaShuffleEnabled", setting.isShuffleEnabled);
                ExternalInterface.addCallback("setMdaShuffleEnabled", setting.setShuffleEnabled);

                // Playlist stuffs ...
                ExternalInterface.addCallback("getMdaPlaylistSize", playlist.size);
                ExternalInterface.addCallback("clearMdaPlaylist", playlist.clear);
                ExternalInterface.addCallback("removeFromMdaPlaylist", playlist.remove);
                ExternalInterface.addCallback("addToMdaPlaylist", playlist.add);

                // controller stuffs...
                ExternalInterface.addCallback("loadMda", load);
                ExternalInterface.addCallback("playMda", play);
                ExternalInterface.addCallback("playNextMda", playNext);
                ExternalInterface.addCallback("playPrevMda", playPrev);
                ExternalInterface.addCallback("playMdaIndex", playIndex);
                ExternalInterface.addCallback("stopMda", stop);
                ExternalInterface.addCallback("getMdaDuration", getDuration);
                ExternalInterface.addCallback("getMdaPlayPosition", getPlayPosition);
                ExternalInterface.addCallback("setMdaPlayPosition", setPlayPosition);
            }

            public function setDebugEnabled(enabled:Boolean):void {
                debug = enabled;
            }

            /**************************** PLAYER IMPL ******************************/
            private var mediaURL:String;
            private var isLoaded:Boolean = false, playPending:Boolean = false;

            public function load(mediaURL:String):void {
                playlist.clear();
                playlist.add(mediaURL);
                var url:String = listManager.getNextURLEntry();
                _load(url);
                playPending = true;
            }

            public function play():void {
               if(isLoaded) {
                    if(!playPending) {
                        var url:String = listManager.getNextURLEntry();
                        _load(url);
                        player.play();
                    } else {
                        player.play();
                        playPending = false;    // workaround for playing after loading fresh playlist :-)
                    }
               } else {
                    try {
                        player.play();
                    } catch(e:Error) {
                        playNext();
                    }
               }
            }

            public function playNext():Boolean {
                var url:String = listManager.getNextURLEntry();
                if(url != null) {
                    _load(url);
                    player.play();
                    return true;
                } else {
                    return false;
                }
            }

            public function playPrev():Boolean {
                var url:String = listManager.getPrevURLEntry();
                if(url != null) {
                    _load(url);
                    player.play();
                    return true;
                } else {
                    return false;
                }
            }

            public function playIndex(index:int):Boolean {
                var url:String = listManager.getURLEntry(index);
                if(url != null) {
                    _load(url);
                    player.play();
                    return true;
                } else {
                    return false;
                }
            }

            public function stop(rewind:Boolean):void {
                if(rewind) {
                    player.stop();
                    isLoaded = false;
                } else {
                    player.pause();
                }
            }

            public function getDuration():Number {
                return player.getDuration();
            }

            public function getPlayPosition():Number {
                return player.getPlayPosition();
            }

            public function setPlayPosition(pos:Number):void {
                player.setPlayPosition(pos);
            }

            public function close():void {
                if(player != null) {
                   player.close();
                }
            }

            /*************************** PLAY STATE HANDLERS *********************/
            private function playFinishedHandler(event:Event):void {
                EventUtil.fireMediaStateChanged(9, listManager.getListIndex());
                if(!playNext()) {
                    Log.info("Media playback finished");
                    EventUtil.fireMediaStateChanged(9);
                    isLoaded = false;
                }
            }

            public function playStartedHandler():void {
                Log.info("Playlist item " + listManager.getListIndex() + " : playback started");
                EventUtil.fireMediaStateChanged(2, listManager.getListIndex());
            }

            /************************** HELPER FUNCTIONS *****************************/
            private function _load(mediaURL:String):void {
                if(player != null) {
                    player.stop(); // stop playback if any ...
                    removeChildAt(0);
                }

                if(mediaURL.search(".mp3") >= 0) {
                    player = mp3
                    addChild(mp3);
                    Log.info("Using MP3Engine");
                } else {
                    player = vdu;
                    addChild(vdu);
                    Log.info("Using VideoEngine");
                }

                Log.info("Loading media at '" + mediaURL + "'");
                player._load(mediaURL);
                isLoaded = true;
            }

            private function updateVolume(event:SettingChangedEvent):void {
                mp3.setVolume(Number(event.newValue));
                vdu.setVolume(Number(event.newValue));
            }
        ]]>
    </mx:Script>
</mx:Application>